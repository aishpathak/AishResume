import { Injectable } from '@angular/core';
import { AcceptanceService } from '../acceptance.service';
import { BaseResponse, RestService, BaseService, BaseRequest, TrackRestCallProgress } from 'ngc-framework';

import { HttpClient } from "@angular/common/http";
import { Observable } from 'rxjs';
import { RclGenerateAwbReq, RclRetriveReq, SearchRclSummaryReq } from '../../export.sharedmodel';
import { EXPBU_ENV, EXPORTaat, EXPORTlocaltransfer, EXP_ENV } from '../../../../environments/environment';
@Injectable({
  providedIn: 'root'
})
export class RclserviceService {


  constructor(private restService: RestService, private httpClient: HttpClient) { }
  private jsonURL = 'assets/testJson/rclsummary.json';
  private jsonURL2 = 'assets/testJson/getMaintainRcl.json';

  @TrackRestCallProgress()
  public rclSummaryList(request: SearchRclSummaryReq) {
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.rclSummaryList, request);
  }

  @TrackRestCallProgress()
  public getRCLRetrieveDetails(request: RclRetriveReq) {
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.rclRetrieveDetail, request);
  }

  @TrackRestCallProgress()
  public finalizeRcl(request): Observable<any> {
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.finalizeRcl, request);
  }

  @TrackRestCallProgress()
  public saveRcl(request): Observable<any> {
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.saveRcl, request);
  }

  @TrackRestCallProgress()
  public getRCLSUmmaryList(request): Observable<any> {
    return this.httpClient.get(this.jsonURL);
  }


  // @TrackRestCallProgress()
  // public getRCLList(request): Observable<any> {
  //   return this.httpClient.get(this.jsonURL2);
  // }

  @TrackRestCallProgress()
  public getmRCLList(request): Observable<any> {
    // return this.httpClient.get(this.jsonURL2);
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.rclExportSearch, request);
  }

  @TrackRestCallProgress()
  public retrivePredecleartionDetails(request): Observable<any> {
    // return this.httpClient.get(this.jsonURL2);
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXPORTaat.serviceBaseURL +
        EXPORTaat.rclRetrivePredecleartionDetail, request);
  }

  @TrackRestCallProgress()
  public validateAndFetchBooking(request): Observable<any> {
    // return this.httpClient.get(this.jsonURL2);
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.validateAndFetchBooking, request);
  }

  @TrackRestCallProgress()
  public generateServiceNumber(request): Observable<any> {
    // return this.httpClient.get(this.jsonURL2);
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.generateServiceNumber, request);
  }

  @TrackRestCallProgress()
  public generateAwbNo(request: RclGenerateAwbReq): Observable<any> {
    // return this.httpClient.get(this.jsonURL2);
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.generateAwbNo, request);
  }


  @TrackRestCallProgress()
  public validateFlight(request: any) {
    return <Observable<BaseResponse<any>>>this.restService.post(
      EXPBU_ENV.serviceBaseURL + EXPBU_ENV.validateFlight,
      request
    );
  }

  // @TrackRestCallProgress()
  // public getShcGroup(request) {
  //   return <Observable<BaseResponse<any>>>this.restService.post(EXP_ENV.serviceBaseURL + EXP_ENV.getShcGroup, request);
  // }

  @TrackRestCallProgress()

  public getLocalTransferListInternal(request): Observable<any> {

    return <Observable<any>>this.restService.post(EXPORTlocaltransfer.serviceBaseURL + EXPORTlocaltransfer.localtransferRetrieveService, request);

  }


  @TrackRestCallProgress()

  public getLocalTransferSaveInterTerminal(request): Observable<any> {
    console.log(request);
    return <Observable<any>>this.restService.post(EXPORTlocaltransfer.serviceBaseURL + EXPORTlocaltransfer.localtransfersaveService, request);

  }


  @TrackRestCallProgress()
  public changePPKMixPPK(request): Observable<any> {
    // return this.httpClient.get(this.jsonURL2);
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXPORTaat.serviceBaseURL +
        EXPORTaat.changePPKMixPPK, request);
  }

  public voidSearch(request): Observable<any> {
    // return this.httpClient.get(this.jsonURL2);
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.voidSearch, request);
  }

  public voidRclAndRemoveInventories(request): Observable<any> {
    // return this.httpClient.get(this.jsonURL2);
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.voidRclAndRemoveInventories, request);
  }

  public rejectSearchByAWB(request): Observable<any> {
    // return this.httpClient.get(this.jsonURL2);
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.rejectSearchByAWB, request);
  }


  public rejectSearchByULD(request): Observable<any> {
    // return this.httpClient.get(this.jsonURL2);
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.rejectSearchByULD, request);
  }
  @TrackRestCallProgress()
  public rejectSave(request): Observable<any> {
    // return this.httpClient.get(this.jsonURL2);
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.voidRclAndRemoveInventories, request);
  }

  public returnSearchByAWB(request): Observable<any> {
    // return this.httpClient.get(this.jsonURL2);
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.returnSearchByAWB, request);
  }

  public returnSearchByULD(request): Observable<any> {
    // return this.httpClient.get(this.jsonURL2);
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.returnSearchByULD, request);
  }

  public returnSave(request): Observable<any> {
    // return this.httpClient.get(this.jsonURL2);
    return <Observable<BaseResponse<any>>>this.restService.post
      (EXP_ENV.serviceBaseURL +
        EXP_ENV.voidRclAndRemoveInventories, request);
  }
  @TrackRestCallProgress()
  public getCarrierCodeByShipment(request: any):
    Observable<any> {
    return <Observable<any>>this.restService.post(EXPORTaat.serviceBaseURL + EXPORTaat.fetchCarrierCodebyShipment, request);
  }


  @TrackRestCallProgress()
  public getCarrierCodeByULD(request: any):
    Observable<any> {
    return <Observable<any>>this.restService.post(EXPORTaat.serviceBaseURL + EXPORTaat.fetchCarrierCodebyULD, request);
  }

}
