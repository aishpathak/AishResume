import { MST_ENV } from './../../environments/environment';
import { BaseService, RestService, BaseRequest, BaseResponse, TrackRestCallProgress } from 'ngc-framework';
import { NgcCoreModule } from 'ngc-framework';
import { Observable } from 'rxjs';
import { Http } from '@angular/http';
import { Injectable } from '@angular/core';

import { MaintainTracingActivityShipmentDataResponse, MaintainTracingActivityShipmentData, MaintainTracingResponse, MaintainTracingActivity, ShimentLocation, MstAssignTeamToGroup, MstAssignTeamToGroupList, MstAssignTeamToAirport, SearchGroup, CargoSurvey, GeneratedCargoSurvey, SurveySearch, Shipment, AbandonedCargoSearch, TracingListResponseObj } from './tracing.shared';

import { TRACING_ENV } from '../../environments/environment';

@Injectable()
export class TracingService extends BaseService {
  constructor(private restService: RestService) {
    super();
  }

  @TrackRestCallProgress()
  public saveAssignTeamGp(request: MstAssignTeamToGroupList): Observable<BaseResponse<any>> {
    if (request && request.groupList) {
      //   request.groupList.forEach((group: MstAssignTeamToGroup) => {
      //     if (group.airports) {
      //       group.teamToAirports = new Array<MstAssignTeamToAirport>();
      //       // Transfer
      //       group.airports.forEach((airport: string) => {
      //         console.log(airport);
      //         let airportGroup: MstAssignTeamToAirport = new MstAssignTeamToAirport();
      //         //from airport codes
      //         airportGroup.airportCode = airport;
      //         //to teamToairports
      //         group.teamToAirports.push(airportGroup);
      //       });
      //     }
      //   });
    }
    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.saveAssigneeTeamGp, request);
  }

  @TrackRestCallProgress()
  public deleteAssignTeamGp(request: MstAssignTeamToGroup): Observable<BaseResponse<any>> {
    console.log(request);
    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.deleteBasedOnTeamID, request);
  }
  @TrackRestCallProgress()
  public searchAssignTeamGp(request: SearchGroup): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.getGroupList, request);
  }
  @TrackRestCallProgress()
  public checkAirportAvailability(request: SearchGroup): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.checkAirportAvailability, request);
  }

  checkForAnyDuplicateEntries(arrayName, controlNameList, errorCode, arrayValue) {
    if (typeof controlNameList === 'string') {
      controlNameList = [controlNameList];
    }
    let hashMap = {};
    let arrayNameList = arrayValue;
    let messageList = [];
    let index = 0;
    for (let arrayInstance of arrayNameList) {
      let hashKey = {
        // controlName: arrayInstance[controlName]
      };
      let i = 1;
      for (const eachControlName of controlNameList) {
        hashKey['controlName' + i] = arrayInstance[eachControlName];
        ++i;
      }
      if (!hashMap[JSON.stringify(hashKey)])
        hashMap[JSON.stringify(hashKey)] = 1;
      else {
        let j = 0;
        for (const controlName in hashKey) {
          if (hashKey.hasOwnProperty(controlName)) {
            let k = j;
            messageList.push(
              {
                code: errorCode,
                referenceId: arrayName + '[' + index + '].' + controlNameList[k]
              }
            );
            ++j;
          }
        }
      }
      ++index;
    }
    return messageList;
  }

  // cargo Survey

  @TrackRestCallProgress()
  public getAutoGeneratedNo(): Observable<BaseResponse<any>> {
    return <Observable<BaseResponse<any>>>this.restService.get(TRACING_ENV.serviceBaseURL + TRACING_ENV.getCargoSurveyNo, new BaseRequest());
  }

  @TrackRestCallProgress()
  public createCargoSurvey(request: CargoSurvey): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.cleanAndPost(TRACING_ENV.serviceBaseURL + TRACING_ENV.createCargoSurvey, request);
  }
  @TrackRestCallProgress()
  public sendReportMail(request: CargoSurvey): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.cleanAndPost(TRACING_ENV.serviceBaseURL + TRACING_ENV.sendReportMail, request);
  }
  @TrackRestCallProgress()
  public updateCargoSurvey(request: CargoSurvey): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.cleanAndPost(TRACING_ENV.serviceBaseURL + TRACING_ENV.updateCargoSurvey, request);
  }
  @TrackRestCallProgress()
  public getSurveyBy(request: GeneratedCargoSurvey): Observable<BaseResponse<any>> {
    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.getSurveyBy, request);
  }


  @TrackRestCallProgress()
  public getShipment(request: GeneratedCargoSurvey): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.getShipment, request);
  }
  @TrackRestCallProgress()
  public cancelConductSurvey(request: GeneratedCargoSurvey): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.cancelConductSurvey, request);
  }
  @TrackRestCallProgress()
  public finalizeConductSurvey(request: GeneratedCargoSurvey): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.finalizeConductSurvey, request);
  }


  @TrackRestCallProgress()
  public validatingItems(request: GeneratedCargoSurvey): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.validatingItems, request);
  }

  @TrackRestCallProgress()
  public getPackingDetails(): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.get(TRACING_ENV.serviceBaseURL + TRACING_ENV.getPackingDetails, new BaseRequest());
  }
  @TrackRestCallProgress()
  public deleteRaiseShipmentPacking(request: Shipment): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.deleteRaiseShipmentPacking, request);
  }


  @TrackRestCallProgress()
  public getMaintainCustAuthList(): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.get(TRACING_ENV.serviceBaseURL + TRACING_ENV.getMaintainCustAuthList, new BaseRequest());
  }
  @TrackRestCallProgress()
  public getUserProfileList(): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.get(TRACING_ENV.serviceBaseURL + TRACING_ENV.getUserProfileList, new BaseRequest());
  }

  @TrackRestCallProgress()
  public getFlight(): Observable<BaseResponse<any>> {
    return <Observable<BaseResponse<any>>>this.restService.get(TRACING_ENV.serviceBaseURL + TRACING_ENV.getFlight, new BaseRequest());
  }



  @TrackRestCallProgress()
  public getTracingActivityDetails(request: MaintainTracingActivity):
    Observable<BaseResponse<MaintainTracingResponse>> {
    return <Observable<BaseResponse<MaintainTracingResponse>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.getTracingActivities, request);
  }
  @TrackRestCallProgress()
  public onSaveTracingActivity(request: MaintainTracingResponse):
    Observable<BaseResponse<MaintainTracingResponse>> {
    return <Observable<BaseResponse<MaintainTracingResponse>>>this.restService.cleanAndPost(TRACING_ENV.serviceBaseURL + TRACING_ENV.saveTracingActivity, request);
  }

  @TrackRestCallProgress()
  public getSurveyDetailsList(request: SurveySearch): Observable<BaseResponse<any>> {
    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.getsurveylist, request);
  }

  @TrackRestCallProgress()
  public getTracingRecordsToDisplay(request) {
    console.log("req", request);
    return <Observable<BaseResponse<any>>>this.restService.post
      (TRACING_ENV.serviceBaseURL + TRACING_ENV.displayTracingRecords, request);
  }

  @TrackRestCallProgress()
  public getAbandonedCargoRecords(request: AbandonedCargoSearch): Observable<BaseResponse<any>> {
    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.getAbandonedCargoList, request);
  }
  @TrackRestCallProgress()
  public getShimentLcoation(request: ShimentLocation): Observable<BaseResponse<any>> {
    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.getShimentLocationList, request);
  }

  @TrackRestCallProgress()
  public getTracingActivity(request: ShimentLocation): Observable<BaseResponse<any>> {
    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.getTracingActivityList, request);
  }

  @TrackRestCallProgress()
  public disposeAbandonCargo(request: any): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.disposeAbandonCargo, request);
  }
  @TrackRestCallProgress()
  public moveToImport(request: any): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.moveToImportAbandonCargo, request);
  }


  // |||||||||||||||||||||||||||GENERATE TRACING REPORT|||||||||||||||||||||||||||||||||

  @TrackRestCallProgress()
  public searchData(request: any): Observable<BaseResponse<any>> {
    return <Observable<BaseResponse<any>>>this.restService.post
      (TRACING_ENV.serviceBaseURL + TRACING_ENV.searchData, request);
  }

  @TrackRestCallProgress()
  public updateData(request: any): Observable<BaseResponse<any>> {
    return <Observable<BaseResponse<any>>>this.restService.post
      (TRACING_ENV.serviceBaseURL + TRACING_ENV.updateData, request);
  }

  @TrackRestCallProgress()
  public getTracingActivityShipmentData(request: MaintainTracingActivityShipmentData):
    Observable<BaseResponse<MaintainTracingActivityShipmentDataResponse>> {
    return <Observable<BaseResponse<MaintainTracingActivityShipmentDataResponse>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.getTracingActivitiesShipmentData, request);
  }

  @TrackRestCallProgress()
  public getTracingNumberOnCreate(request: MaintainTracingActivityShipmentData):
    Observable<BaseResponse<MaintainTracingActivityShipmentDataResponse>> {
    return <Observable<BaseResponse<MaintainTracingActivityShipmentDataResponse>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.getTracingNumberOnCreate, request);
  }

  @TrackRestCallProgress()
  public getTracingUserType(request) {
    console.log("req", request);
    return <Observable<BaseResponse<any>>>this.restService.post
      (TRACING_ENV.serviceBaseURL + TRACING_ENV.getTypeOFLoggedInUser, request);
  }
  //||||||||||Tracing Email ||||||||||||||||||||||||||||||

  public getTracingEmailInfo(request: any):
    Observable<BaseResponse<any>> {
    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.getTracingEmailInfo, request);

  }

  public sendTracingMail(request: any):
    Observable<BaseResponse<any>> {
    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.sendTracingMail, request);

  }


  // |||||||||||||||||||||||||||GENERATE TRACING REPORT|||||||||||||||||||||||||||||||||

  @TrackRestCallProgress()
  public getNetworkUldTrackingRecordsToDisplay(request) {
    console.log("req", request);
    return <Observable<BaseResponse<any>>>this.restService.post
      (TRACING_ENV.serviceBaseURL + TRACING_ENV.networkUldTrackingRecords, request);
  }

  @TrackRestCallProgress()
  public getNetworkAWBTrackingRecordsToDisplay(request) {
    console.log("req", request);
    return <Observable<BaseResponse<any>>>this.restService.post
      (TRACING_ENV.serviceBaseURL + TRACING_ENV.networkAWBTrackingRecords, request);
  }

  @TrackRestCallProgress()
  public onSearchRfid(request) {
    return <Observable<BaseResponse<any>>>this.restService.post
      (TRACING_ENV.serviceBaseURL + TRACING_ENV.onSearchRfid, request);
  }

  @TrackRestCallProgress()
  public onSearchByTagId(request) {
    return <Observable<BaseResponse<any>>>this.restService.post
      (TRACING_ENV.serviceBaseURL + TRACING_ENV.onSearchByTagId, request);
  }

  @TrackRestCallProgress()
  public onReprint(request) {
    return <Observable<BaseResponse<any>>>this.restService.post
      (TRACING_ENV.serviceBaseURL + TRACING_ENV.onReprint, request);
  }

  @TrackRestCallProgress()
  public onPrint(request) {
    return <Observable<BaseResponse<any>>>this.restService.post
      (TRACING_ENV.serviceBaseURL + TRACING_ENV.onPrint, request);
  }

  @TrackRestCallProgress()
  public updateTag(request) {
    return <Observable<BaseResponse<any>>>this.restService.post
      (TRACING_ENV.serviceBaseURL + TRACING_ENV.updateTag, request);
  }

  @TrackRestCallProgress()
  public cancelTag(request) {
    return <Observable<BaseResponse<any>>>this.restService.post
      (TRACING_ENV.serviceBaseURL + TRACING_ENV.cancelTag, request);
  }
  @TrackRestCallProgress()
  public addTag(request) {
    return <Observable<BaseResponse<any>>>this.restService.post
      (TRACING_ENV.serviceBaseURL + TRACING_ENV.addTag, request);
  }

  @TrackRestCallProgress()
  public onPrintRfid(request) {
    return <Observable<BaseResponse<any>>>this.restService.post
      (TRACING_ENV.serviceBaseURL + TRACING_ENV.onPrintRfid, request);
  }

  @TrackRestCallProgress()
  public unfinalizeSurvey(request: GeneratedCargoSurvey): Observable<BaseResponse<any>> {
    console.log(TRACING_ENV.serviceBaseURL + TRACING_ENV.unFinalizeConductSurvey);
    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.unFinalizeConductSurvey, request);
  }

  @TrackRestCallProgress()
  public validatePOAirportPass(request: any): Observable<BaseResponse<any>> {
    return <Observable<BaseResponse<any>>>(
      this.restService.post(
        TRACING_ENV.serviceBaseURL + TRACING_ENV.validateAirportPass,
        request
      )
    );
  }

  // @TrackRestCallProgress()
  // public validateBlackListCustomer(request: any): Observable<BaseResponse<any>> {
  //   return <Observable<BaseResponse<any>>>(
  //     this.restService.post(
  //       TRACING_ENV.serviceBaseURL + TRACING_ENV.validateBlacklistedCustomer,
  //       request
  //     )
  //   );
  // }

  @TrackRestCallProgress()
  public sendReportMailMain(request: any): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.cleanAndPost(TRACING_ENV.serviceBaseURL + TRACING_ENV.sendReportMailmain, request);
  }

  @TrackRestCallProgress()
  public restoreTracingRecord(request: any): Observable<BaseResponse<any>> {

    return <Observable<BaseResponse<any>>>this.restService.post(TRACING_ENV.serviceBaseURL + TRACING_ENV.restoreTracingRecord, request);
  }

}
